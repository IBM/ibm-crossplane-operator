apiVersion: apps/v1
kind: Deployment
metadata:
  name: {{ template "name" . }}
  labels:
    app: {{ template "name" . }}
    chart: {{ template "chart" . }}
    release: {{ .Release.Name }}
    heritage: {{ .Release.Service }}
spec:
  replicas: {{ .Values.replicas }}
  selector:
    matchLabels:
      app: {{ template "name" . }}
      release: {{ .Release.Name }}
  strategy:
    type: {{ .Values.deploymentStrategy }}
  template:
    metadata:
      annotations:
        productName: IBM Cloud Platform Common Services
        productID: "068a62892a1e4db39641342e592daa25"
        productMetric: FREE
      {{- if .Values.metrics.enabled }}
      annotations:
        prometheus.io/path: /metrics
        prometheus.io/port: "8080"
        prometheus.io/scrape: "true"
      {{- end }}
      labels:
        app: {{ template "name" . }}
        release: {{ .Release.Name }}
        intent: projected
    spec:
      affinity:
        nodeAffinity:
          requiredDuringSchedulingIgnoredDuringExecution:
            nodeSelectorTerms:
            - matchExpressions:
              - key: kubernetes.io/arch
                operator: In
                values:
                - amd64
                - ppc64le
                - s390x
        podAntiAffinity:
          preferredDuringSchedulingIgnoredDuringExecution:
          - podAffinityTerm:
              labelSelector:
                matchExpressions:
                - key: app
                  operator: In
                  values:
                  - {{ template "name" . }}
              topologyKey: "kubernetes.io/hostname"
            weight: 100
      topologySpreadConstraints:
      - maxSkew: 1
        topologyKey: topology.kubernetes.io/zone
        whenUnsatisfiable: ScheduleAnyway
        labelSelector:
          matchLabels:
            key: app
            values: {{ template "name" . }}
      - maxSkew: 1
        topologyKey: topology.kubernetes.io/region
        whenUnsatisfiable: ScheduleAnyway
        labelSelector:
          matchLabels:
            key: app
            values: {{ template "name" . }}
      {{- if .Values.priorityClassName }}
      priorityClassName: {{ .Values.priorityClassName  | quote }}
      {{- end }}
      serviceAccountName: {{ template "name" . }}
      containers:
      - image: {{ .Values.image.repository }}
        {{- if .Values.args }}
        args:
        {{- range $arg := .Values.args }}
        - {{ $arg }}
        {{- end }}
        {{- end }}
        imagePullPolicy: {{ .Values.image.pullPolicy }}
        name: {{ .Chart.Name }}
        resources:
          {{- toYaml .Values.resourcesCrossplane | nindent 12 }}
        {{- if .Values.metrics.enabled }}
        ports:
        - name: metrics
          containerPort: 8080
        {{- end }}
        securityContext:
          {{- toYaml .Values.securityContextCrossplane | nindent 12 }}
        env:
          - name: POD_NAMESPACE
            valueFrom:
              fieldRef:
                fieldPath: metadata.namespace
          - name: LEADER_ELECTION
            value: "{{ .Values.leaderElection }}"
        {{- if .Values.defaultLabel.name }}
          - name: DEFAULT_LABEL_NAME
            value: "{{ .Values.defaultLabel.name | trim }}"
        {{- end }}
        {{- if .Values.defaultLabel.value }}
          - name: DEFAULT_LABEL_VALUE
            value: "{{ .Values.defaultLabel.value | trim }}"
        {{- end }}
        volumeMounts:
          - mountPath: /cache
            name: package-cache
      volumes:
      - name: package-cache
        {{- if .Values.packageCache.pvc }}
        persistentVolumeClaim:
          claimName: {{ .Values.packageCache.pvc }}
        {{- else }}
        emptyDir:
          medium: {{ .Values.packageCache.medium }}
          sizeLimit: {{ .Values.packageCache.sizeLimit }}
        {{- end }}
