apiVersion: apiextensions.ibm.crossplane.io/v1
kind: Composition
metadata:
  name: kafka-iaf.odlm.bedrock.ibm.com
  labels:
    consumer: iaf
    kafkaUser: 'true'
    provider: odlm
    app.kubernetes.io/instance: ibm-crossplane-operator
    app.kubernetes.io/managed-by: ibm-crossplane-operator
    app.kubernetes.io/name: ibm-crossplane
spec:
  compositeTypeRef:
    apiVersion: shim.bedrock.ibm.com/v1alpha1
    kind: KafkaComposite
  resources:
    - base:
        apiVersion: operator.ibm.com/v1alpha1
        kind: OperandRequest
        spec:
          requests:
            - operands:
                - name: ibm-events-operator
              registry: common-service
              registryNamespace: ibm-common-services
      patches:
        - fromFieldPath: 'metadata.annotations[bedrock.ibm.com/shared-service-name]'
          toFieldPath: metadata.name
          type: FromCompositeFieldPath
        - fromFieldPath: spec.claimRef.namespace
          toFieldPath: metadata.namespace
          type: FromCompositeFieldPath
        - fromFieldPath: 'metadata.annotations[bedrock.ibm.com/shared-service-namespace]'
          toFieldPath: metadata.namespace
          type: FromCompositeFieldPath
        - fromFieldPath: 'metadata.annotations[bedrock.ibm.com/namespace]'
          toFieldPath: 'spec.requests[0].registryNamespace'
          type: FromCompositeFieldPath
      readinessChecks:
        - fieldPath: status.phase
          matchString: Running
          type: MatchString
    - base:
        apiVersion: ibmevents.ibm.com/v1beta1
        kind: KafkaUser
        spec:
          authentication:
            type: scram-sha-512
          authorization:
            acls:
              - host: '*'
                operation: All
                resource:
                  name: iafdemo
                  patternType: prefix
                  type: topic
              - host: '*'
                operation: All
                resource:
                  name: iafdemo
                  patternType: prefix
                  type: group
              - host: '*'
                operation: Read
                resource:
                  name: __schema_iafdemo
                  patternType: prefix
                  type: topic
              - host: '*'
                operation: Alter
                resource:
                  name: __schema_iafdemo
                  patternType: prefix
                  type: topic
              - host: '*'
                operation: Describe
                resource:
                  type: cluster
              - host: '*'
                operation: Read
                resource:
                  name: __schema_
                  patternType: prefix
                  type: topic
            type: simple
          writeConnectionSecretToRef:
            name: PLACEHOLDER
      connectionDetails:
        - fromFieldPath: spec.authentication.type
          name: kafka.authentication.type
        - fromFieldPath: status.secret
          name: kafka.authentication.secret
        - fromFieldPath: status.username
          name: kafka.authentication.username
        - fromConnectionSecretKey: password
          name: kafka.authentication.password
      patches:
        - fromFieldPath: spec.claimRef.name
          toFieldPath: metadata.name
          type: FromCompositeFieldPath
        - fromFieldPath: spec.claimRef.namespace
          toFieldPath: metadata.namespace
          type: FromCompositeFieldPath
        - fromFieldPath: 'metadata.annotations[bedrock.ibm.com/shared-service-namespace]'
          toFieldPath: metadata.namespace
          type: FromCompositeFieldPath
        - fromFieldPath: 'metadata.annotations[bedrock.ibm.com/shared-service-name]'
          toFieldPath: 'metadata.labels[''ibmevents.ibm.com/cluster'']'
          type: FromCompositeFieldPath
        - fromFieldPath: spec.claimRef.name
          toFieldPath: spec.writeConnectionSecretToRef.name
          type: FromCompositeFieldPath
        - fromFieldPath: spec.parameters.user.topicPrefix
          toFieldPath: 'spec.authorization.acls[0].resource.name'
          type: FromCompositeFieldPath
        - fromFieldPath: spec.parameters.user.topicPrefix
          toFieldPath: 'spec.authorization.acls[1].resource.name'
          type: FromCompositeFieldPath
        - fromFieldPath: spec.parameters.user.topicPrefix
          toFieldPath: 'spec.authorization.acls[2].resource.name'
          transforms:
            - string:
                fmt: __schema_%s
              type: string
          type: FromCompositeFieldPath
        - fromFieldPath: spec.parameters.user.topicPrefix
          toFieldPath: 'spec.authorization.acls[3].resource.name'
          transforms:
            - string:
                fmt: __schema_%s
              type: string
          type: FromCompositeFieldPath
        - fromFieldPath: spec.parameters.kafkaUserCR.authentication
          toFieldPath: spec.authentication
          type: FromCompositeFieldPath
        - fromFieldPath: spec.parameters.kafkaUserCR.authorization
          toFieldPath: spec.authorization
          type: FromCompositeFieldPath
      readinessChecks:
        - fieldPath: status.secret
          type: NonEmpty
        - fieldPath: status.username
          type: NonEmpty